diff --git a/src/resolvers/git.cr b/src/resolvers/git.cr
index 4ad8e6a..cb45fe1 100644
--- a/src/resolvers/git.cr
+++ b/src/resolvers/git.cr
@@ -180,12 +180,12 @@ module Shards
     private def run(command, path = local_path, capture = false)
       # Shards.logger.debug { "cd #{path}" }
 
-      Dir.chdir(path) do
+      Dir.cd(path) do
         Shards.logger.debug command
 
-        output = capture ? StringIO.new : false
-        error = StringIO.new
-        status = Process.run("/bin/sh", input: StringIO.new(command), output: output, error: error)
+        output = capture ? MemoryIO.new : false
+        error = MemoryIO.new
+        status = Process.run("/bin/sh", input: MemoryIO.new(command), output: output, error: error)
 
         if status.success?
           output.to_s if capture
diff --git a/src/script.cr b/src/script.cr
index 2888d79..04efd65 100644
--- a/src/script.cr
+++ b/src/script.cr
@@ -1,8 +1,8 @@
 module Shards
   module Script
     def self.run(path, command)
-      Dir.chdir(path) do
-        status = Process.run("/bin/sh", input: StringIO.new(command))
+      Dir.cd(path) do
+        status = Process.run("/bin/sh", input: MemoryIO.new(command))
         raise Error.new("#{name} script failed: #{command}") unless status.success?
       end
     end
diff --git a/test/support/cli.cr b/test/support/cli.cr
index f67fe82..bb6d7eb 100644
--- a/test/support/cli.cr
+++ b/test/support/cli.cr
@@ -14,7 +14,7 @@ module Shards
     end
 
     def with_shard(metadata, lock = nil)
-      Dir.chdir(application_path) do
+      Dir.cd(application_path) do
         File.write "shard.yml", to_shard_yaml(metadata)
         File.write "shard.lock", to_lock_yaml(lock) if lock
         yield
diff --git a/test/support/factories.cr b/test/support/factories.cr
index 4ca2371..e2cfea7 100644
--- a/test/support/factories.cr
+++ b/test/support/factories.cr
@@ -15,14 +15,14 @@ module Shards
     end
 
     def create_git_repository(project, *versions)
-      Dir.chdir(tmp_path) do
+      Dir.cd(tmp_path) do
         run "git init #{project}"
       end
 
       Dir.mkdir(File.join(git_path(project), "src"))
       File.write(File.join(git_path(project), "src", "#{project}.cr"), "module #{project.capitalize}\nend")
 
-      Dir.chdir(git_path(project)) do
+      Dir.cd(git_path(project)) do
         run "git add src/#{project}.cr"
       end
 
@@ -30,7 +30,7 @@ module Shards
     end
 
     def create_git_release(project, version, shard = true)
-      Dir.chdir(git_path(project)) do
+      Dir.cd(git_path(project)) do
         if shard
           contents = shard.is_a?(String) ? shard : "name: #{project}\nversion: #{version}\n"
           create_shard project, contents
@@ -41,7 +41,7 @@ module Shards
     end
 
     def create_git_commit(project, message = "new commit")
-      Dir.chdir(git_path(project)) do
+      Dir.cd(git_path(project)) do
         run "git add ."
         run "git commit --allow-empty -m '#{message}'"
       end
@@ -52,13 +52,13 @@ module Shards
     end
 
     def create_file(project, filename, contents)
-      Dir.chdir(git_path(project)) do
+      Dir.cd(git_path(project)) do
         File.write filename, contents
       end
     end
 
     def git_commits(project)
-      Dir.chdir(git_path(project)) do
+      Dir.cd(git_path(project)) do
         run("git log --format='%H'", capture: true).not_nil!.split("\n")
       end
     end
@@ -81,8 +81,8 @@ module Shards
 
     def run(command, capture = false)
       # puts command
-      output, error = StringIO.new, StringIO.new
-      status = Process.run("/bin/sh", input: StringIO.new(command), output: output, error: error)
+      output, error = MemoryIO.new, MemoryIO.new
+      status = Process.run("/bin/sh", input: MemoryIO.new(command), output: output, error: error)
 
       if status.success?
         output.to_s if capture
